(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{549:function(a,s,n){"use strict";n.r(s);var t=n(8),e=Object(t.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("p",[a._v("几乎所有的编程语言都支持函数或者类似函数的编程结构。现代计算机进程执行模型大部分是基于”堆栈“的，而编译器不需要多函数做过多的转换就能让其在栈上运行，只需要处理好参数和返回值的传递即可；另一方面函数对代码的抽象程度适中，就像胶水，很容易将编程语言的不同层级抽象体”黏结“起来；同时近几年函数式语言因其数值不变性在高并发的场景备受青睐，新的语言将其视为”第一公民“")]),a._v(" "),n("p",[a._v("函数是程序执行的一个基本语法结构。 函数特点表现在")]),a._v(" "),n("ul",[n("li",[a._v("函数是一种类型，函数类型变量可以像其他类型变量一样使用，可以作为其他函数参数的参数或者返回值，也可以直接调用执行")]),a._v(" "),n("li",[a._v("函数支持多值返回")]),a._v(" "),n("li",[a._v("支持闭包")]),a._v(" "),n("li",[a._v("函数支持可变参数")])]),a._v(" "),n("h2",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),n("h3",{attrs:{id:"函数定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[a._v("#")]),a._v(" 函数定义")]),a._v(" "),n("p",[a._v("函数是 go 语言程序源代码的基本构造单位，一个函数的定义包含:")]),a._v(" "),n("ul",[n("li",[a._v("函数声明关键字 func")]),a._v(" "),n("li",[a._v("函数名")]),a._v(" "),n("li",[a._v("参数列表")]),a._v(" "),n("li",[a._v("返回列表")]),a._v(" "),n("li",[a._v("函数体")])]),a._v(" "),n("p",[n("strong",[a._v("函数的特点")])]),a._v(" "),n("ol",[n("li",[a._v("函数可以没有输入参数，也可以没有返回值")]),a._v(" "),n("li",[a._v("多个相邻的相同类型的参数可以使用简写模式 a,b int")]),a._v(" "),n("li",[a._v("支持又名的返回值，参数名相当于函数体最外层的局部变量，命名返回值变量会被初始化为类型零值，最后的 return 可以不带参数名直接返回")]),a._v(" "),n("li",[a._v("不支持默认值参数")]),a._v(" "),n("li",[a._v("不支持函数重载")]),a._v(" "),n("li",[a._v("不支持函数嵌套(不支持命名函数的嵌套定义)")])]),a._v(" "),n("h3",{attrs:{id:"多值返回"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多值返回"}},[a._v("#")]),a._v(" 多值返回")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func swap(a,b int)(int,int){\nreturn b,a\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h3",{attrs:{id:"函数传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数传参"}},[a._v("#")]),a._v(" 函数传参")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package main\nimport {\n    "fmt"\n}\nfunc chvalue(a int) int {\n  a = a+1\n  return a\n}\nfunc chpointer(a *int) int {\n  *a = *a+1\n  return a\n}\nfunc main(){\n  a:=10\n  chvalue(a) //实参传递给形参是值拷贝\n  chpointer(&a) //实参传递给形参是值拷贝，只不过是复制的a的内存地址值\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("h3",{attrs:{id:"不定参数-args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不定参数-args"}},[a._v("#")]),a._v(" 不定参数 args")]),a._v(" "),n("p",[a._v("不定数目的参数形式，不定参数声明使用"),n("code",[a._v("param ...type")]),a._v("的语法格式")]),a._v(" "),n("ul",[n("li",[a._v("所有的不定参数类型必须是相同的")]),a._v(" "),n("li",[a._v("不定参数必须是函数的最后一个参数")]),a._v(" "),n("li",[a._v("不定参数在函数体内相当于切片，对切片的操作同样适合于对不定参数的操作")])]),a._v(" "),n("h2",{attrs:{id:"函数类型-函数签名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数类型-函数签名"}},[a._v("#")]),a._v(" 函数类型(函数签名)")]),a._v(" "),n("p",[a._v("函数类型又叫做函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和"),n("code",[a._v("{")]),a._v(",可以用"),n("code",[a._v("fmt.Printf")]),a._v("的"),n("code",[a._v("%T")]),a._v("格式化参数打印函数的类型")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package main\nimport "fmt"\nfunc add(a,b int) int {\n  return a+b\n}\nfunc main(){\n  fmt.Printf("%T\\n",add) // func(int,int) int\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("两个函数类型相同的条件是：")]),a._v(" "),n("ul",[n("li",[a._v("拥有相同的形参列表和返回值列表、列表元素次序+个数+类型都相同")])]),a._v(" "),n("p",[a._v("也可以使用 type 定义函数类型，函数类型变量可以作为函数的参数或者返回值")]),a._v(" "),n("h2",{attrs:{id:"匿名函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[a._v("#")]),a._v(" 匿名函数")]),a._v(" "),n("ul",[n("li",[a._v("有名函数")]),a._v(" "),n("li",[a._v("匿名函数")])]),a._v(" "),n("p",[a._v("匿名函数可以看作函数字面量，所有直接使用函数类型变量的地方都可以由匿名函数代替。匿名函数可以直接赋值给函数变量，可以当作是惨也可以作为返回值，还可以直接被调用。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
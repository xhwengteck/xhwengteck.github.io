(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{547:function(a,s,t){"use strict";t.r(s);var e=t(8),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"复合数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复合数据类型"}},[a._v("#")]),a._v(" 复合数据类型")]),a._v(" "),t("h3",{attrs:{id:"_1-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-简介"}},[a._v("#")]),a._v(" 1.1. 简介")]),a._v(" "),t("p",[a._v("其他数据类型组合而成的数据类型。GO 语言基本的复合数据类型有:")]),a._v(" "),t("ul",[t("li",[a._v("指针")]),a._v(" "),t("li",[a._v("数组")]),a._v(" "),t("li",[a._v("切片")]),a._v(" "),t("li",[a._v("字典(map)")]),a._v(" "),t("li",[a._v("通道")]),a._v(" "),t("li",[a._v("结构")]),a._v(" "),t("li",[a._v("接口a")])]),a._v(" "),t("h3",{attrs:{id:"_1-2-指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-指针"}},[a._v("#")]),a._v(" 1.2. 指针")]),a._v(" "),t("p",[a._v("Go 语言支持指针、指针的声明类型是"),t("code",[a._v("*T")]),a._v("、Go 同样支持多级指针"),t("code",[a._v("**T")]),a._v("、通过变量名前面的&符号类获取变量的地址")]),a._v(" "),t("h4",{attrs:{id:"_1-2-1-赋值语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-赋值语句"}},[a._v("#")]),a._v(" 1.2.1 赋值语句")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("*T 出现在等号左边表示声明指针、在等号右边表示取指针指向的值\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_1-2-2-结构体中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-结构体中"}},[a._v("#")]),a._v(" 1.2.2 结构体中")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("结构体指针访问支持点操作\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_1-2-3-不支持指针运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-不支持指针运算"}},[a._v("#")]),a._v(" 1.2.3 不支持指针运算")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("go原生支持垃圾回收，若支持运算会导致垃圾回收必变，所以紧张对指针的运算\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_1-2-4-函数中允许返回局部变量的地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-函数中允许返回局部变量的地址"}},[a._v("#")]),a._v(" 1.2.4 函数中允许返回局部变量的地址")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Go编译器使用‘栈逃逸’机制，将这种局部变量的空间分配在堆上\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"_1-3-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数组"}},[a._v("#")]),a._v(" 1.3. 数组")]),a._v(" "),t("p",[a._v("数组的类型名是 "),t("code",[a._v("[n]elementType")]),a._v(",n 是数组长度，elementType 是数组元素的类型。数组一般在创建时通过字面量初始化，单独声明一个数组而不进行初始化是没有意义的")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a:=[3]int{1,2,3} //指定数组长度、数组元素类型、并初始化字面量\n\na:=[...]int{1,2,3,4,5} //不指定长度、数组长度由字面量初始化列表决定\n\na:=[3]int{1:1,2:3} //指定数组长度、通过索引值初始化、没有初始化的元素时使用该类型的默认值\n\na:=[...]int{1:1,2:3} //不指定长度、通过索引值初始化、数组长度由最后一个索引值来决定，没有指定索引的元素则被初始化为类型的默认值\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("数组特点:")]),a._v(" "),t("ul",[t("li",[a._v("创建则长度固定，不可再追加元素")]),a._v(" "),t("li",[a._v("数组是值类型的、数组赋值或者是作为函数参数都是值拷贝")]),a._v(" "),t("li",[a._v("数组长度是数组类型的组成部分、[0]int 和[2]int 是不同的类型")]),a._v(" "),t("li",[a._v("可以根据数组来创建切片类型")])]),a._v(" "),t("h3",{attrs:{id:"_1-4-切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-切片"}},[a._v("#")]),a._v(" 1.4. 切片")]),a._v(" "),t("p",[a._v("背景:go 数组的定长性和值拷贝限制了使用场景，go 的切片类型 slice，是一种可变长数组，其数据结构中有指向数组的指针，所以是一种引用类型。")]),a._v(" "),t("p",[a._v("go 切片维护三个元素------指向底层数组的指针、切片元素的数量、底层数组的容量")]),a._v(" "),t("h4",{attrs:{id:"_1-4-1-切片如何创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-切片如何创建"}},[a._v("#")]),a._v(" 1.4.1 切片如何创建")]),a._v(" "),t("h5",{attrs:{id:"_1-4-1-1-由数组创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-1-由数组创建"}},[a._v("#")]),a._v(" 1.4.1.1 由数组创建")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("数组的切片\nvar array:=[...]int{1,2,3,4,5,6,7,8,9}\ns1 := array[0:3]\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h5",{attrs:{id:"_1-4-1-1-由内置函数-make-来创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-1-由内置函数-make-来创建"}},[a._v("#")]),a._v(" 1.4.1.1 由内置函数 make 来创建")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("由make创建的切片各个元素都没默认初始化为切片元素类型的零值\na:=make([]int,10)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("h4",{attrs:{id:"_1-4-2-数组支持操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-数组支持操作"}},[a._v("#")]),a._v(" 1.4.2 数组支持操作")]),a._v(" "),t("ul",[t("li",[a._v("内置函数 len()返回切片长度")]),a._v(" "),t("li",[a._v("内置函数 cap()返回切片底层数组容量")]),a._v(" "),t("li",[a._v("内置函数 append()对切片追加元素")]),a._v(" "),t("li",[a._v("内置函数 copy()用于复制一个切片")]),a._v(" "),t("li",[a._v("字符串和切片的相关转换")])]),a._v(" "),t("h3",{attrs:{id:"_1-5-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-map"}},[a._v("#")]),a._v(" 1.5. map")]),a._v(" "),t("p",[a._v("Go 语言内置的字典类型叫 map，"),t("code",[a._v("map[K]T")]),a._v(",K 可以是任意可以进行比较的类型，T 是值类型，map 也是一种引用类型")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('map创建\nma:=map[string]int{"a":1,"b":2}\nmake内置函数创建\nmp1:=make(map[int]string)\nmp1[1]= "tom"\nmap 支持操作：mapName[key]\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h3",{attrs:{id:"_1-6-结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-结构体"}},[a._v("#")]),a._v(" 1.6. 结构体")]),a._v(" "),t("p",[a._v("Go 结构体 struct、不同类型元素组合而成")]),a._v(" "),t("ul",[t("li",[a._v("struct 类型字面量")]),a._v(" "),t("li",[a._v("自定义 struct 类型")]),a._v(" "),t("li",[a._v("type 自定义类型")])])])}),[],!1,null,null,null);s.default=r.exports}}]);